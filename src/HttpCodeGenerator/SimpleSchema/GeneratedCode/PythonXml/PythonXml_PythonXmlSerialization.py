# --------------------------------------------------------------------------------
# |
# |  WARNING:
# |  This file was generated; any local changes will be overwritten during
# |  future invocations of the generator!
# |
# |  Generated by: <SimpleSchemaGenerator>/Plugins/Impl/PythonSerializationImpl.py
# |  Generated on: 2020-07-22 09:28:15.483437
# |
# --------------------------------------------------------------------------------
import copy
import sys

from collections import OrderedDict

import six

import CommonEnvironment
from CommonEnvironment.TypeInfo import Arity
from CommonEnvironment.TypeInfo.AnyOfTypeInfo import AnyOfTypeInfo
from CommonEnvironment.TypeInfo.ClassTypeInfo import ClassTypeInfo
from CommonEnvironment.TypeInfo.DictTypeInfo import DictTypeInfo
from CommonEnvironment.TypeInfo.GenericTypeInfo import GenericTypeInfo
from CommonEnvironment.TypeInfo.ListTypeInfo import ListTypeInfo

from CommonEnvironment.TypeInfo.FundamentalTypes.Serialization.PythonCodeVisitor import PythonCodeVisitor
from CommonEnvironment.TypeInfo.FundamentalTypes.Serialization.StringSerialization import StringSerialization

# <Unused import> pylint: disable = W0611
# <Unused import> pylint: disable = W0614
from CommonEnvironment.TypeInfo.FundamentalTypes.All import *               # <Wildcard import> pylint: disable = W0401

# <Standard import should be placed before...> pylint: disable = C0411

# ----------------------------------------------------------------------
import xml.etree.ElementTree as ET

from CommonEnvironment import FileSystem
from CommonEnvironment.TypeInfo.FundamentalTypes.Serialization.XmlSerialization import XmlSerialization

# ----------------------------------------------------------------------
# <Method name "..." doesn't conform to PascalCase naming style> pylint: disable = C0103
# <Line too long> pylint: disable = C0301
# <Too many lines in module> pylint: disable = C0302
# <Wrong hanging indentation> pylint: disable = C0330

# <Too few public methods> pylint: disable = R0903
# <Too many public methods> pylint: disable = R0904
# <Too many branches> pylint: disable = R0912
# <Too many statements> pylint: disable = R0915


# ----------------------------------------------------------------------
class SerializationException(Exception):
    def __init__(self, ex_or_string):
        if isinstance(ex_or_string, six.string_types):
            super(SerializationException, self).__init__(ex_or_string)
        else:
            super(SerializationException, self).__init__(str(ex_or_string))

            self.__dict__ = copy.deepcopy(ex_or_string.__dict__)


class KeySerializationException(SerializationException):                    pass
class SerializeException(SerializationException):                           pass
class DeserializeException(SerializationException):                         pass


class DoesNotExist(object):                                                 pass


# ----------------------------------------------------------------------
# |
# |  Utility Methods
# |
# ----------------------------------------------------------------------
def Deserialize(
    root,
    process_additional_data=False,
    always_include_optional=False,
):
    """Convenience method that deserializes all top-level elements"""

    if isinstance(root, six.string_types):
            if FileSystem.IsFilename(root):
                with open(root) as f:
                    root = f.read()

            root = ET.fromstring(root)

    result = _CreatePythonObject(
            attributes=None,
        )

    this_result = Deserialize_simple_schema_content(
        root,
        is_root=True,
    )
    if this_result is not DoesNotExist:
        setattr(result, "simple_schema_content", this_result)
    elif always_include_optional:
        setattr(result, "simple_schema_content", None)

    this_result = Deserialize_endpoints(
        root,
        is_root=True,
        process_additional_data=process_additional_data,
        always_include_optional=always_include_optional,

    )
    if this_result is not DoesNotExist:
        setattr(result, "endpoints", this_result)
    elif always_include_optional:
        setattr(result, "endpoints", [])

    return result


# ----------------------------------------------------------------------
def Deserialize_simple_schema_content(
    item,
    is_root=False,
):
    """Deserializes 'simple_schema_content' from an XML object (ElementTree) to a python object"""

    if isinstance(item, six.string_types):
        if FileSystem.IsFilename(item):
            with open(item) as f:
                item = f.read()

        item = ET.fromstring(item)

    potential_child = _GetXmlElement(
        item,
        "simple_schema_content",
        is_optional=True,
        is_collection=False,
    )
    if potential_child is not DoesNotExist or is_root:
        item = potential_child

    try:
        try:
            item = Deserializer().simple_schema_content(
                item,
            )
        except:
            _DecorateActiveException("simple_schema_content")
    except SerializationException:
        raise
    except Exception as ex:
        raise DeserializeException(ex)

    return item


# ----------------------------------------------------------------------
def Deserialize_endpoints(
    items,
    process_additional_data=False,
    always_include_optional=False,
    is_root=False,
):
    """Deserializes 'endpoints' from an XML object (ElementTree) to a python object"""

    if isinstance(items, six.string_types):
        if FileSystem.IsFilename(items):
            with open(items) as f:
                items = f.read()

        items = ET.fromstring(items)

    potential_child = _GetXmlElement(
        items,
        "endpoints",
        is_optional=True,
        is_collection=True,
    )
    if potential_child is not DoesNotExist or is_root:
        items = potential_child

    try:
        try:
            items = Deserializer().endpoints(
                items,
                process_additional_data=process_additional_data,
                always_include_optional=always_include_optional,
            )
        except:
            _DecorateActiveException("endpoints")
    except SerializationException:
        raise
    except Exception as ex:
        raise DeserializeException(ex)

    return items


# ----------------------------------------------------------------------
# |
# |  Type Infos
# |
# ----------------------------------------------------------------------
simple_schema_content_TypeInfo                                              = StringTypeInfo(min_length=1, arity=Arity.FromString('?'))
endpoints_TypeInfo                                                          = PythonCodeVisitor.LoadTypeInfo(ClassTypeInfo(OrderedDict([ ( "uri", StringTypeInfo(min_length=1) ), ( "variables", ClassTypeInfo(OrderedDict([ ( "name", StringTypeInfo(min_length=1) ) ]), require_exact_match=True, arity=Arity.FromString('*')) ), ( "description", StringTypeInfo(min_length=1, arity=Arity.FromString('?')) ), ( "group", StringTypeInfo(min_length=1, arity=Arity.FromString('?')) ), ( "context", StringTypeInfo(min_length=1, arity=Arity.FromString('?')) ), ( "simple_schema_content", StringTypeInfo(min_length=1, arity=Arity.FromString('?')) ), ( "methods", ClassTypeInfo(OrderedDict([ ( "verb", EnumTypeInfo([ 'POST', 'GET', 'PUT', 'PATCH', 'DELETE', 'OPTIONS', 'HEAD', 'TRACE', 'CONNECT', ]) ), ( "summary", StringTypeInfo(min_length=1, max_length=120, arity=Arity.FromString('?')) ), ( "description", StringTypeInfo(min_length=1, arity=Arity.FromString('?')) ), ( "context", StringTypeInfo(min_length=1, arity=Arity.FromString('?')) ), ( "simple_schema_content", StringTypeInfo(min_length=1, arity=Arity.FromString('?')) ), ( "request_and_responses", ClassTypeInfo(OrderedDict([ ( "content_type", StringTypeInfo(min_length=1) ), ( "context", StringTypeInfo(min_length=1, arity=Arity.FromString('?')) ), ( "simple_schema_content", StringTypeInfo(min_length=1, arity=Arity.FromString('?')) ), ( "request", ClassTypeInfo(OrderedDict([ ( "headers", ClassTypeInfo(OrderedDict([ ( "name", 3 ) ]), require_exact_match=True, arity=Arity.FromString('*')) ), ( "query_items", ClassTypeInfo(OrderedDict([ ( "name", 3 ) ]), require_exact_match=True, arity=Arity.FromString('*')) ), ( "form_items", ClassTypeInfo(OrderedDict([ ( "name", 3 ) ]), require_exact_match=True, arity=Arity.FromString('*')) ), ( "body", ClassTypeInfo(OrderedDict([ ( "description", StringTypeInfo(min_length=1, arity=Arity.FromString('?')) ), ( "simple_schema", StringTypeInfo(min_length=1) ) ]), require_exact_match=True, arity=Arity.FromString('?')) ) ]), require_exact_match=True, arity=Arity.FromString('?')) ), ( "responses", ClassTypeInfo(OrderedDict([ ( "code", IntTypeInfo(min=0, max=99999) ), ( "description", StringTypeInfo(min_length=1, arity=Arity.FromString('?')) ), ( "context", StringTypeInfo(min_length=1, arity=Arity.FromString('?')) ), ( "headers", ClassTypeInfo(OrderedDict([ ( "name", 3 ) ]), require_exact_match=True, arity=Arity.FromString('*')) ), ( "body", ClassTypeInfo(OrderedDict([ ( "description", 23 ), ( "simple_schema", 24 ) ]), require_exact_match=True, arity=Arity.FromString('?')) ) ]), require_exact_match=True, arity=Arity.FromString('+')) ) ]), require_exact_match=True, arity=Arity.FromString('+')) ) ]), require_exact_match=True, arity=Arity.FromString('*')) ), ( "children", ClassTypeInfo(OrderedDict([ ( "uri", 1 ), ( "variables", 2 ), ( "description", 4 ), ( "group", 5 ), ( "context", 6 ), ( "simple_schema_content", 7 ), ( "methods", 8 ), ( "children", 31 ) ]), require_exact_match=True, arity=Arity.FromString('*')) ) ]), require_exact_match=True, arity=Arity.FromString('+')))

_type_description_TypeInfo_Contents                                         = OrderedDict([("description", GenericTypeInfo(arity=Arity.FromString('?'))), ("simple_schema", GenericTypeInfo())])
_type_descriptions_TypeInfo_Contents                                        = OrderedDict([("name", GenericTypeInfo()), ("description", GenericTypeInfo(arity=Arity.FromString('?'))), ("simple_schema", GenericTypeInfo())])
_endpoints_TypeInfo_Contents                                                = OrderedDict([("uri", GenericTypeInfo()), ("variables", GenericTypeInfo(arity=Arity.FromString('*'))), ("description", GenericTypeInfo(arity=Arity.FromString('?'))), ("group", GenericTypeInfo(arity=Arity.FromString('?'))), ("context", GenericTypeInfo(arity=Arity.FromString('?'))), ("simple_schema_content", GenericTypeInfo(arity=Arity.FromString('?'))), ("methods", GenericTypeInfo(arity=Arity.FromString('*'))), ("children", GenericTypeInfo(arity=Arity.FromString('*')))])
_endpoints_methods_TypeInfo_Contents                                        = OrderedDict([("verb", GenericTypeInfo()), ("summary", GenericTypeInfo(arity=Arity.FromString('?'))), ("description", GenericTypeInfo(arity=Arity.FromString('?'))), ("context", GenericTypeInfo(arity=Arity.FromString('?'))), ("simple_schema_content", GenericTypeInfo(arity=Arity.FromString('?'))), ("request_and_responses", GenericTypeInfo(arity=Arity.FromString('+')))])
_endpoints_methods_request_and_responses_TypeInfo_Contents                  = OrderedDict([("content_type", GenericTypeInfo()), ("context", GenericTypeInfo(arity=Arity.FromString('?'))), ("simple_schema_content", GenericTypeInfo(arity=Arity.FromString('?'))), ("request", GenericTypeInfo(arity=Arity.FromString('?'))), ("responses", GenericTypeInfo(arity=Arity.FromString('+')))])
_endpoints_methods_request_and_responses_request_TypeInfo_Contents          = OrderedDict([("headers", GenericTypeInfo(arity=Arity.FromString('*'))), ("query_items", GenericTypeInfo(arity=Arity.FromString('*'))), ("form_items", GenericTypeInfo(arity=Arity.FromString('*'))), ("body", GenericTypeInfo(arity=Arity.FromString('?')))])
_endpoints_methods_request_and_responses_responses_TypeInfo_Contents        = OrderedDict([("code", GenericTypeInfo()), ("description", GenericTypeInfo(arity=Arity.FromString('?'))), ("context", GenericTypeInfo(arity=Arity.FromString('?'))), ("headers", GenericTypeInfo(arity=Arity.FromString('*'))), ("body", GenericTypeInfo(arity=Arity.FromString('?')))])

_context_TypeInfo                                                           = StringTypeInfo(min_length=1, arity=Arity.FromString('?'))
_type_description_TypeInfo                                                  = AnyOfTypeInfo([ClassTypeInfo(_type_description_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_type_description_TypeInfo_Contents, require_exact_match=False)])
_type_description__value__TypeInfo                                          = StringTypeInfo(min_length=1)
_type_description_description_TypeInfo                                      = StringTypeInfo(min_length=1, arity=Arity.FromString('?'))
_type_descriptions_TypeInfo                                                 = AnyOfTypeInfo([ClassTypeInfo(_type_descriptions_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_type_descriptions_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('*'))
_type_descriptions__value__TypeInfo                                         = StringTypeInfo(min_length=1)
_type_descriptions_name_TypeInfo                                            = StringTypeInfo(min_length=1)
_type_descriptions_description_TypeInfo                                     = StringTypeInfo(min_length=1, arity=Arity.FromString('?'))
_simple_schema_content_TypeInfo                                             = StringTypeInfo(min_length=1, arity=Arity.FromString('?'))
_endpoints_TypeInfo                                                         = AnyOfTypeInfo([ClassTypeInfo(_endpoints_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_endpoints_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('+'))
_endpoints_uri_TypeInfo                                                     = StringTypeInfo(min_length=1)
_endpoints_description_TypeInfo                                             = StringTypeInfo(min_length=1, arity=Arity.FromString('?'))
_endpoints_group_TypeInfo                                                   = StringTypeInfo(min_length=1, arity=Arity.FromString('?'))
_endpoints_methods_TypeInfo                                                 = AnyOfTypeInfo([ClassTypeInfo(_endpoints_methods_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_endpoints_methods_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('*'))
_endpoints_methods_verb_TypeInfo                                            = EnumTypeInfo([ 'POST', 'GET', 'PUT', 'PATCH', 'DELETE', 'OPTIONS', 'HEAD', 'TRACE', 'CONNECT', ])
_endpoints_methods_summary_TypeInfo                                         = StringTypeInfo(min_length=1, max_length=120, arity=Arity.FromString('?'))
_endpoints_methods_description_TypeInfo                                     = StringTypeInfo(min_length=1, arity=Arity.FromString('?'))
_endpoints_methods_request_and_responses_TypeInfo                           = AnyOfTypeInfo([ClassTypeInfo(_endpoints_methods_request_and_responses_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_endpoints_methods_request_and_responses_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('+'))
_endpoints_methods_request_and_responses_content_type_TypeInfo              = StringTypeInfo(min_length=1)
_endpoints_methods_request_and_responses_request_TypeInfo                   = AnyOfTypeInfo([ClassTypeInfo(_endpoints_methods_request_and_responses_request_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_endpoints_methods_request_and_responses_request_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('?'))
_endpoints_methods_request_and_responses_request_body_TypeInfo              = AnyOfTypeInfo([ClassTypeInfo(_type_description_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_type_description_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('?'))
_endpoints_methods_request_and_responses_request_body__value__TypeInfo      = StringTypeInfo(min_length=1)
_endpoints_methods_request_and_responses_responses_TypeInfo                 = AnyOfTypeInfo([ClassTypeInfo(_endpoints_methods_request_and_responses_responses_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_endpoints_methods_request_and_responses_responses_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('+'))
_endpoints_methods_request_and_responses_responses_code_TypeInfo            = IntTypeInfo(min=0, max=99999)
_endpoints_methods_request_and_responses_responses_description_TypeInfo     = StringTypeInfo(min_length=1, arity=Arity.FromString('?'))
_endpoints_methods_request_and_responses_responses_body_TypeInfo            = AnyOfTypeInfo([ClassTypeInfo(_type_description_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_type_description_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('?'))
_endpoints_methods_request_and_responses_responses_body__value__TypeInfo    = StringTypeInfo(min_length=1)
_endpoints_children_TypeInfo                                                = AnyOfTypeInfo([ClassTypeInfo(_endpoints_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_endpoints_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('*'))

# ----------------------------------------------------------------------
# |
# |  Deserializer
# |
# ----------------------------------------------------------------------
class Deserializer(object):

    # ----------------------------------------------------------------------
    @classmethod
    def context(cls, item):
        if item in [DoesNotExist, None]:
            _context_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._context_Item(item)

        _context_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def type_description(cls, item, always_include_optional, process_additional_data):
        if item in [DoesNotExist, None]:
            _type_description_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._type_description_Item(item, always_include_optional, process_additional_data)

        if not process_additional_data:
            _type_description_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def type_description_description(cls, item):
        if item in [DoesNotExist, None]:
            _type_description_description_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._type_description_description_Item(item)

        _type_description_description_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def type_descriptions(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            _type_descriptions_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._type_descriptions_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _ValidateKeys("name", results)


        if not process_additional_data:
            _type_descriptions_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def type_descriptions_name(cls, item):
        if item in [DoesNotExist, None]:
            _type_descriptions_name_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._type_descriptions_name_Item(item)

        _type_descriptions_name_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def type_descriptions_description(cls, item):
        if item in [DoesNotExist, None]:
            _type_descriptions_description_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._type_descriptions_description_Item(item)

        _type_descriptions_description_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def simple_schema_content(cls, item):
        if item in [DoesNotExist, None]:
            _simple_schema_content_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._simple_schema_content_Item(item)

        _simple_schema_content_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            _endpoints_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._endpoints_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _ValidateKeys("uri", results)


        if not process_additional_data:
            _endpoints_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_uri(cls, item):
        if item in [DoesNotExist, None]:
            _endpoints_uri_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._endpoints_uri_Item(item)

        _endpoints_uri_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_variables(cls, items, always_include_optional, process_additional_data):
        return cls.type_descriptions(items, always_include_optional, process_additional_data)

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_description(cls, item):
        if item in [DoesNotExist, None]:
            _endpoints_description_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._endpoints_description_Item(item)

        _endpoints_description_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_group(cls, item):
        if item in [DoesNotExist, None]:
            _endpoints_group_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._endpoints_group_Item(item)

        _endpoints_group_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_context(cls, item):
        return cls.context(item)

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_simple_schema_content(cls, item):
        return cls.simple_schema_content(item)

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            _endpoints_methods_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._endpoints_methods_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _ValidateKeys("verb", results)


        if not process_additional_data:
            _endpoints_methods_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_verb(cls, item):
        if item in [DoesNotExist, None]:
            _endpoints_methods_verb_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._endpoints_methods_verb_Item(item)

        _endpoints_methods_verb_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_summary(cls, item):
        if item in [DoesNotExist, None]:
            _endpoints_methods_summary_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._endpoints_methods_summary_Item(item)

        _endpoints_methods_summary_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_description(cls, item):
        if item in [DoesNotExist, None]:
            _endpoints_methods_description_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._endpoints_methods_description_Item(item)

        _endpoints_methods_description_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_context(cls, item):
        return cls.endpoints_context(item)

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_simple_schema_content(cls, item):
        return cls.endpoints_simple_schema_content(item)

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_request_and_responses(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            _endpoints_methods_request_and_responses_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._endpoints_methods_request_and_responses_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _ValidateKeys("content_type", results)


        if not process_additional_data:
            _endpoints_methods_request_and_responses_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_request_and_responses_content_type(cls, item):
        if item in [DoesNotExist, None]:
            _endpoints_methods_request_and_responses_content_type_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._endpoints_methods_request_and_responses_content_type_Item(item)

        _endpoints_methods_request_and_responses_content_type_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_request_and_responses_context(cls, item):
        return cls.endpoints_methods_context(item)

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_request_and_responses_simple_schema_content(cls, item):
        return cls.endpoints_methods_simple_schema_content(item)

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_request_and_responses_request(cls, item, always_include_optional, process_additional_data):
        if item in [DoesNotExist, None]:
            _endpoints_methods_request_and_responses_request_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._endpoints_methods_request_and_responses_request_Item(item, always_include_optional, process_additional_data)

        if not process_additional_data:
            _endpoints_methods_request_and_responses_request_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_request_and_responses_request_headers(cls, items, always_include_optional, process_additional_data):
        return cls.type_descriptions(items, always_include_optional, process_additional_data)

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_request_and_responses_request_query_items(cls, items, always_include_optional, process_additional_data):
        return cls.type_descriptions(items, always_include_optional, process_additional_data)

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_request_and_responses_request_form_items(cls, items, always_include_optional, process_additional_data):
        return cls.type_descriptions(items, always_include_optional, process_additional_data)

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_request_and_responses_request_body(cls, item, always_include_optional, process_additional_data):
        if item in [DoesNotExist, None]:
            _endpoints_methods_request_and_responses_request_body_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._endpoints_methods_request_and_responses_request_body_Item(item, always_include_optional, process_additional_data)

        if not process_additional_data:
            _endpoints_methods_request_and_responses_request_body_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_request_and_responses_responses(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            _endpoints_methods_request_and_responses_responses_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._endpoints_methods_request_and_responses_responses_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _ValidateKeys("code", results)


        if not process_additional_data:
            _endpoints_methods_request_and_responses_responses_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_request_and_responses_responses_code(cls, item):
        if item in [DoesNotExist, None]:
            _endpoints_methods_request_and_responses_responses_code_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._endpoints_methods_request_and_responses_responses_code_Item(item)

        _endpoints_methods_request_and_responses_responses_code_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_request_and_responses_responses_description(cls, item):
        if item in [DoesNotExist, None]:
            _endpoints_methods_request_and_responses_responses_description_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._endpoints_methods_request_and_responses_responses_description_Item(item)

        _endpoints_methods_request_and_responses_responses_description_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_request_and_responses_responses_context(cls, item):
        return cls.endpoints_methods_request_and_responses_context(item)

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_request_and_responses_responses_headers(cls, items, always_include_optional, process_additional_data):
        return cls.type_descriptions(items, always_include_optional, process_additional_data)

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_methods_request_and_responses_responses_body(cls, item, always_include_optional, process_additional_data):
        if item in [DoesNotExist, None]:
            _endpoints_methods_request_and_responses_responses_body_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._endpoints_methods_request_and_responses_responses_body_Item(item, always_include_optional, process_additional_data)

        if not process_additional_data:
            _endpoints_methods_request_and_responses_responses_body_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def endpoints_children(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            _endpoints_children_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._endpoints_children_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _ValidateKeys("uri", results)


        if not process_additional_data:
            _endpoints_children_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    @classmethod
    def _context_Item(cls, item):
        return XmlSerialization.DeserializeItem(_context_TypeInfo, cls.GetText(item), **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _type_description_Item(cls, item, always_include_optional, process_additional_data):
        attributes = OrderedDict()

        # description
        try:
            cls._ApplyOptionalAttribute(item, "description", attributes, cls.type_description_description, always_include_optional)
        except:
            _DecorateActiveException("description")

        # <fundamental value>
        try:
            fundamental_value = XmlSerialization.DeserializeItem(_type_description__value__TypeInfo, cls.GetText(item), **{})
        except:
            _DecorateActiveException("value type")

        result = _CreatePythonObject(
            attributes=attributes,
            **{"simple_schema": fundamental_value, "_text_attribute_name": "simple_schema"},
        )

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"description", "simple_schema"},
            )

        else:
            cls._RejectAdditionalData(
                item,
                exclude_names=["description", "simple_schema"],
            )

        _type_description_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _type_description_description_Item(cls, item):
        return XmlSerialization.DeserializeItem(_type_description_description_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _type_descriptions_Item(cls, item, always_include_optional, process_additional_data):
        attributes = OrderedDict()

        # name
        try:
            attributes["name"] = cls.type_descriptions_name(
                cls._GetXmlAttribute(
                    item,
                    "name",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("name")

        # description
        try:
            cls._ApplyOptionalAttribute(item, "description", attributes, cls.type_descriptions_description, always_include_optional)
        except:
            _DecorateActiveException("description")

        # <fundamental value>
        try:
            fundamental_value = XmlSerialization.DeserializeItem(_type_descriptions__value__TypeInfo, cls.GetText(item), **{})
        except:
            _DecorateActiveException("value type")

        result = _CreatePythonObject(
            attributes=attributes,
            **{"simple_schema": fundamental_value, "_text_attribute_name": "simple_schema"},
        )

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"name", "description", "simple_schema"},
            )

        else:
            cls._RejectAdditionalData(
                item,
                exclude_names=["name", "description", "simple_schema"],
            )

        _type_descriptions_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _type_descriptions_name_Item(cls, item):
        return XmlSerialization.DeserializeItem(_type_descriptions_name_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _type_descriptions_description_Item(cls, item):
        return XmlSerialization.DeserializeItem(_type_descriptions_description_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _simple_schema_content_Item(cls, item):
        return XmlSerialization.DeserializeItem(_simple_schema_content_TypeInfo, cls.GetText(item), **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_Item(cls, item, always_include_optional, process_additional_data):
        attributes = OrderedDict()

        # uri
        try:
            attributes["uri"] = cls.endpoints_uri(
                cls._GetXmlAttribute(
                    item,
                    "uri",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("uri")

        # description
        try:
            cls._ApplyOptionalAttribute(item, "description", attributes, cls.endpoints_description, always_include_optional)
        except:
            _DecorateActiveException("description")

        # group
        try:
            cls._ApplyOptionalAttribute(item, "group", attributes, cls.endpoints_group, always_include_optional)
        except:
            _DecorateActiveException("group")

        result = _CreatePythonObject(
            attributes=attributes,
        )

        # variables
        try:
            cls._ApplyOptionalChildren(item, "variables", result, lambda value: cls.endpoints_variables(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("variables")

        # context
        try:
            cls._ApplyOptionalChild(item, "context", result, cls.endpoints_context, always_include_optional)
        except:
            _DecorateActiveException("context")

        # simple_schema_content
        try:
            cls._ApplyOptionalChild(item, "simple_schema_content", result, cls.endpoints_simple_schema_content, always_include_optional)
        except:
            _DecorateActiveException("simple_schema_content")

        # methods
        try:
            cls._ApplyOptionalChildren(item, "methods", result, lambda value: cls.endpoints_methods(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("methods")

        # children
        try:
            cls._ApplyOptionalChildren(item, "children", result, lambda value: cls.endpoints_children(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("children")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"uri", "variables", "description", "group", "context", "simple_schema_content", "methods", "children"},
            )

        else:
            cls._RejectAdditionalData(
                item,
                exclude_names=["uri", "variables", "description", "group", "context", "simple_schema_content", "methods", "children"],
            )

        _endpoints_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_uri_Item(cls, item):
        return XmlSerialization.DeserializeItem(_endpoints_uri_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_description_Item(cls, item):
        return XmlSerialization.DeserializeItem(_endpoints_description_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_group_Item(cls, item):
        return XmlSerialization.DeserializeItem(_endpoints_group_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_methods_Item(cls, item, always_include_optional, process_additional_data):
        attributes = OrderedDict()

        # verb
        try:
            attributes["verb"] = cls.endpoints_methods_verb(
                cls._GetXmlAttribute(
                    item,
                    "verb",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("verb")

        # summary
        try:
            cls._ApplyOptionalAttribute(item, "summary", attributes, cls.endpoints_methods_summary, always_include_optional)
        except:
            _DecorateActiveException("summary")

        # description
        try:
            cls._ApplyOptionalAttribute(item, "description", attributes, cls.endpoints_methods_description, always_include_optional)
        except:
            _DecorateActiveException("description")

        result = _CreatePythonObject(
            attributes=attributes,
        )

        # context
        try:
            cls._ApplyOptionalChild(item, "context", result, cls.endpoints_methods_context, always_include_optional)
        except:
            _DecorateActiveException("context")

        # simple_schema_content
        try:
            cls._ApplyOptionalChild(item, "simple_schema_content", result, cls.endpoints_methods_simple_schema_content, always_include_optional)
        except:
            _DecorateActiveException("simple_schema_content")

        # request_and_responses
        try:
            setattr(result, "request_and_responses", cls.endpoints_methods_request_and_responses(
                _GetXmlElement(
                    item,
                    "request_and_responses",
                    is_optional=False,
                    is_collection=True,
                ),
                always_include_optional,
                process_additional_data

            )
            )
        except:
            _DecorateActiveException("request_and_responses")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"verb", "summary", "description", "context", "simple_schema_content", "request_and_responses"},
            )

        else:
            cls._RejectAdditionalData(
                item,
                exclude_names=["verb", "summary", "description", "context", "simple_schema_content", "request_and_responses"],
            )

        _endpoints_methods_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_methods_verb_Item(cls, item):
        return XmlSerialization.DeserializeItem(_endpoints_methods_verb_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_methods_summary_Item(cls, item):
        return XmlSerialization.DeserializeItem(_endpoints_methods_summary_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_methods_description_Item(cls, item):
        return XmlSerialization.DeserializeItem(_endpoints_methods_description_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_methods_request_and_responses_Item(cls, item, always_include_optional, process_additional_data):
        attributes = OrderedDict()

        # content_type
        try:
            attributes["content_type"] = cls.endpoints_methods_request_and_responses_content_type(
                cls._GetXmlAttribute(
                    item,
                    "content_type",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("content_type")

        result = _CreatePythonObject(
            attributes=attributes,
        )

        # context
        try:
            cls._ApplyOptionalChild(item, "context", result, cls.endpoints_methods_request_and_responses_context, always_include_optional)
        except:
            _DecorateActiveException("context")

        # simple_schema_content
        try:
            cls._ApplyOptionalChild(item, "simple_schema_content", result, cls.endpoints_methods_request_and_responses_simple_schema_content, always_include_optional)
        except:
            _DecorateActiveException("simple_schema_content")

        # request
        try:
            cls._ApplyOptionalChild(item, "request", result, lambda value: cls.endpoints_methods_request_and_responses_request(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("request")

        # responses
        try:
            setattr(result, "responses", cls.endpoints_methods_request_and_responses_responses(
                _GetXmlElement(
                    item,
                    "responses",
                    is_optional=False,
                    is_collection=True,
                ),
                always_include_optional,
                process_additional_data

            )
            )
        except:
            _DecorateActiveException("responses")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"content_type", "context", "simple_schema_content", "request", "responses"},
            )

        else:
            cls._RejectAdditionalData(
                item,
                exclude_names=["content_type", "context", "simple_schema_content", "request", "responses"],
            )

        _endpoints_methods_request_and_responses_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_methods_request_and_responses_content_type_Item(cls, item):
        return XmlSerialization.DeserializeItem(_endpoints_methods_request_and_responses_content_type_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_methods_request_and_responses_request_Item(cls, item, always_include_optional, process_additional_data):
        result = _CreatePythonObject(
            attributes=None,
        )

        # headers
        try:
            cls._ApplyOptionalChildren(item, "headers", result, lambda value: cls.endpoints_methods_request_and_responses_request_headers(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("headers")

        # query_items
        try:
            cls._ApplyOptionalChildren(item, "query_items", result, lambda value: cls.endpoints_methods_request_and_responses_request_query_items(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("query_items")

        # form_items
        try:
            cls._ApplyOptionalChildren(item, "form_items", result, lambda value: cls.endpoints_methods_request_and_responses_request_form_items(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("form_items")

        # body
        try:
            cls._ApplyOptionalChild(item, "body", result, lambda value: cls.endpoints_methods_request_and_responses_request_body(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("body")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"headers", "query_items", "form_items", "body"},
            )

        else:
            cls._RejectAdditionalData(
                item,
                exclude_names=["headers", "query_items", "form_items", "body"],
            )

        _endpoints_methods_request_and_responses_request_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_methods_request_and_responses_request_body_Item(cls, item, always_include_optional, process_additional_data):
        attributes = OrderedDict()

        # description
        try:
            cls._ApplyOptionalAttribute(item, "description", attributes, cls.type_description_description, always_include_optional)
        except:
            _DecorateActiveException("description")

        # <fundamental value>
        try:
            fundamental_value = XmlSerialization.DeserializeItem(_endpoints_methods_request_and_responses_request_body__value__TypeInfo, cls.GetText(item), **{})
        except:
            _DecorateActiveException("value type")

        result = _CreatePythonObject(
            attributes=attributes,
            **{"simple_schema": fundamental_value, "_text_attribute_name": "simple_schema"},
        )

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"description", "simple_schema"},
            )

        else:
            cls._RejectAdditionalData(
                item,
                exclude_names=["description", "simple_schema"],
            )

        _endpoints_methods_request_and_responses_request_body_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_methods_request_and_responses_responses_Item(cls, item, always_include_optional, process_additional_data):
        attributes = OrderedDict()

        # code
        try:
            attributes["code"] = cls.endpoints_methods_request_and_responses_responses_code(
                cls._GetXmlAttribute(
                    item,
                    "code",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("code")

        # description
        try:
            cls._ApplyOptionalAttribute(item, "description", attributes, cls.endpoints_methods_request_and_responses_responses_description, always_include_optional)
        except:
            _DecorateActiveException("description")

        result = _CreatePythonObject(
            attributes=attributes,
        )

        # context
        try:
            cls._ApplyOptionalChild(item, "context", result, cls.endpoints_methods_request_and_responses_responses_context, always_include_optional)
        except:
            _DecorateActiveException("context")

        # headers
        try:
            cls._ApplyOptionalChildren(item, "headers", result, lambda value: cls.endpoints_methods_request_and_responses_responses_headers(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("headers")

        # body
        try:
            cls._ApplyOptionalChild(item, "body", result, lambda value: cls.endpoints_methods_request_and_responses_responses_body(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("body")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"code", "description", "context", "headers", "body"},
            )

        else:
            cls._RejectAdditionalData(
                item,
                exclude_names=["code", "description", "context", "headers", "body"],
            )

        _endpoints_methods_request_and_responses_responses_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_methods_request_and_responses_responses_code_Item(cls, item):
        return XmlSerialization.DeserializeItem(_endpoints_methods_request_and_responses_responses_code_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_methods_request_and_responses_responses_description_Item(cls, item):
        return XmlSerialization.DeserializeItem(_endpoints_methods_request_and_responses_responses_description_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_methods_request_and_responses_responses_body_Item(cls, item, always_include_optional, process_additional_data):
        attributes = OrderedDict()

        # description
        try:
            cls._ApplyOptionalAttribute(item, "description", attributes, cls.type_description_description, always_include_optional)
        except:
            _DecorateActiveException("description")

        # <fundamental value>
        try:
            fundamental_value = XmlSerialization.DeserializeItem(_endpoints_methods_request_and_responses_responses_body__value__TypeInfo, cls.GetText(item), **{})
        except:
            _DecorateActiveException("value type")

        result = _CreatePythonObject(
            attributes=attributes,
            **{"simple_schema": fundamental_value, "_text_attribute_name": "simple_schema"},
        )

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"description", "simple_schema"},
            )

        else:
            cls._RejectAdditionalData(
                item,
                exclude_names=["description", "simple_schema"],
            )

        _endpoints_methods_request_and_responses_responses_body_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _endpoints_children_Item(cls, item, always_include_optional, process_additional_data):
        attributes = OrderedDict()

        # uri
        try:
            attributes["uri"] = cls.endpoints_uri(
                cls._GetXmlAttribute(
                    item,
                    "uri",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("uri")

        # description
        try:
            cls._ApplyOptionalAttribute(item, "description", attributes, cls.endpoints_description, always_include_optional)
        except:
            _DecorateActiveException("description")

        # group
        try:
            cls._ApplyOptionalAttribute(item, "group", attributes, cls.endpoints_group, always_include_optional)
        except:
            _DecorateActiveException("group")

        result = _CreatePythonObject(
            attributes=attributes,
        )

        # variables
        try:
            cls._ApplyOptionalChildren(item, "variables", result, lambda value: cls.endpoints_variables(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("variables")

        # context
        try:
            cls._ApplyOptionalChild(item, "context", result, cls.endpoints_context, always_include_optional)
        except:
            _DecorateActiveException("context")

        # simple_schema_content
        try:
            cls._ApplyOptionalChild(item, "simple_schema_content", result, cls.endpoints_simple_schema_content, always_include_optional)
        except:
            _DecorateActiveException("simple_schema_content")

        # methods
        try:
            cls._ApplyOptionalChildren(item, "methods", result, lambda value: cls.endpoints_methods(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("methods")

        # children
        try:
            cls._ApplyOptionalChildren(item, "children", result, lambda value: cls.endpoints_children(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("children")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"uri", "variables", "description", "group", "context", "simple_schema_content", "methods", "children"},
            )

        else:
            cls._RejectAdditionalData(
                item,
                exclude_names=["uri", "variables", "description", "group", "context", "simple_schema_content", "methods", "children"],
            )

        _endpoints_children_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalChild(cls, item, attribute_name, dest, apply_func, always_include_optional, default_value_func=None):
        value = _GetXmlElement(
            item,
            attribute_name,
            is_optional=True,
            is_collection=False,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                setattr(dest, attribute_name, value)
                return

        if default_value_func:
            setattr(dest, attribute_name, default_value_func())
            return

        if always_include_optional:
            setattr(dest, attribute_name, None)

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalChildren(cls, items, attribute_name, dest, apply_func, always_include_optional):
        value = _GetXmlElement(
            items,
            attribute_name,
            is_optional=True,
            is_collection=True,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                setattr(dest, attribute_name, value)
                return

        # No default statement

        if always_include_optional:
            setattr(dest, attribute_name, [])

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalAttribute(cls, item, attribute_name, dest, apply_func, always_include_optional, default_value_func=None):
        value = cls._GetXmlAttribute(
            item,
            attribute_name,
            is_optional=True,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                dest[attribute_name] = value
                return

        if default_value_func:
            dest[attribute_name] = default_value_func()
            return

        if always_include_optional:
            dest[attribute_name] = None

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyAdditionalData(
        cls,
        source,
        dest,
        exclude_names,
    ):
        for name, child in cls._GenerateAdditionalDataChildren(source, exclude_names):
            try:
                if isinstance(child, list):
                    children = []

                    for index, item in enumerate(child):
                        item_name = "Index {}".format(index)

                        try:
                            children.append(cls._CreateAdditionalDataItem(item_name, item))
                        except:
                            _DecorateActiveException(item_name)

                    setattr(dest, name, children)
                else:
                    setattr(dest, name, cls._CreateAdditionalDataItem(name, child))
            except:
                _DecorateActiveException(name)

    # ----------------------------------------------------------------------
    @classmethod
    def _RejectAdditionalData(cls, source, exclude_names):
        errors = []

        for name, child in cls._GenerateAdditionalDataChildren(source, exclude_names):
            errors.append(name)

        if errors:
            raise Exception("The item contains unexpected children: {}".format(", ".join(['"{}"'.format(error) for error in errors])))

    # ----------------------------------------------------------------------
    @classmethod
    def _CreateAdditionalDataItem(cls, name, source):
        attributes = OrderedDict()

        for k, v in six.iteritems(source.attrib):
            if k.startswith("_"):
                continue

            attributes[k] = v

        if source.text and source.text.strip() and not source:
            return _CreatePythonObject(
                attributes=attributes,
                **{"simple_value": source.text, "_text_attribute_name": "simple_value"},
            )

        result = _CreatePythonObject(
            attributes=attributes,
        )

        for child_name, child_or_children in cls._GenerateAdditionalDataChildren(source, set()):
            try:
                if isinstance(child_or_children, list):
                    new_items = []

                    for index, child in enumerate(child_or_children):
                        try:
                            new_items.append(cls._CreateAdditionalDataItem("item", child))
                        except:
                            _DecorateActiveException("Index {}".format(index))

                    if child_name is None:
                        result = new_items
                        break

                    setattr(result, child_name, new_items)
                else:
                    assert child_name is not None
                    new_item = cls._CreateAdditionalDataItem(child_name, child_or_children)

                    setattr(result, child_name, new_item)
            except:
                _DecorateActiveException(child_name)

        return result

    # ----------------------------------------------------------------------
    @staticmethod
    def _GetXmlAttribute(
        element,
        attribute_name,
        is_optional=False,
    ):
        value = element.attrib.get(attribute_name, DoesNotExist)
        if value is DoesNotExist and not is_optional:
            raise SerializeException("The attribute '{}' does not exist".format(attribute_name))

        return value

    # ----------------------------------------------------------------------
    @staticmethod
    def GetText(item):
        if item is None:
            item = ""

        if hasattr(item, "text"):
            item = item.text

        return item.strip()

    # ----------------------------------------------------------------------
    @staticmethod
    def _GenerateAdditionalDataChildren(element, exclude_names):
        children = OrderedDict()

        for child in element:
            if child.tag.startswith("_") or child.tag in exclude_names:
                continue

            children.setdefault(child.tag, []).append(child)

        if len(children) == 1 and next(six.iterkeys(children)) == "item":
            value = next(six.itervalues(children))

            if not isinstance(value, list):
                value = [value]

            yield None, value

        else:
            for k, v in six.iteritems(children):
                if len(v) == 1:
                    yield k, v[0]
                else:
                    yield k, v


# ----------------------------------------------------------------------
def _GetXmlElement(
    element,
    child_name,
    is_optional=False,
    is_collection=False,
):
    children = element.findall(child_name)
    if not children:
        if is_optional:
            return DoesNotExist

        raise SerializeException("No elements were found")
    if len(children) != 1:
        raise SerializeException("Multiple items were found ({})".format(len(children)))

    result = children[0]

    if is_collection:
        result = result.findall("item")

    return result


# ----------------------------------------------------------------------
class Object(object):
    def __init__(self):
        self._attribute_names = set()

    def __repr__(self):
        return CommonEnvironment.ObjectReprImpl(self)


# ----------------------------------------------------------------------
def _CreatePythonObject(
    attributes=None,
    **kwargs
):
    attributes = attributes or {}

    result = Object()

    for d in [attributes, kwargs]:
        for k, v in six.iteritems(d):
            setattr(result, k, v)

    for k in six.iterkeys(attributes):
        result._attribute_names.add(k)

    return result


# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
def _DecorateActiveException(frame_desc):
    exception = sys.exc_info()[1]

    if not hasattr(exception, "stack"):
        setattr(exception, "stack", [])

    exception.stack.insert(0, frame_desc)

    # <The raise statement is not inside an except clause> pylint: disable = E0704
    raise

# ----------------------------------------------------------------------
def _ValidateKeys(key_attribute_name, items):
    keys = set()

    for item in items:
        if isinstance(item, dict):
            key = item.get(key_attribute_name)
        else:
            key = getattr(item, key_attribute_name)

        if key in keys:
            raise KeySerializationException("The key '{}' is not unique: '{}'".format(key_attribute_name, key))

        keys.add(key)
